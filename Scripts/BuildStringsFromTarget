#!/bin/zsh -euf
#
# Copyright 2010-2011 Omni Development, Inc. All rights reserved.
#
# This software may only be used and reproduced according to the
# terms in the file OmniSourceLicense.html, which should be
# distributed with this project and can also be found at
# <http://www.omnigroup.com/developer/sourcecode/sourcelicense/>.
#
# $Id$

#
# Xcode doesn't go out of its way to make it easy to figure out which source
# files were a part of which target.
#

SCRIPTS_DIR=$0:h

# Require the caller to provide a list of expected string table names. This prevents cases where NSLocalizedStringXXX calls are moved from one framework to another without fixing the table name (and thus possibly resulting in collisions)
# Localizable nib filenames should _not_ be passed on the command line; they will be determined automatically. (This means it is valid to have a BuildStringsFromTarget step that has no arguments if the only localizable resources are nibs.)
typeset -a EXPECTED_STRINGS_FILES
EXPECTED_STRINGS_FILES=($*)

# Always build strings into en.lproj.
DEVELOPMENT_REGION="en"

# Build the strings file(s) into a separate directory so we can avoid mucking with timestamps in the build output unless needed (see below). Donâ€™t move the file list into place unless building it succeeds.
STRINGS_DIR="$DERIVED_FILES_DIR/BuildStringsFromTarget-$TARGET_NAME"
TMP_OUTPUT="$STRINGS_DIR/$DEVELOPMENT_REGION".lproj
LOCALIZABLE_FILE_LIST="$TMP_OUTPUT"/files

if [ -d "$STRINGS_DIR" ]; then
    if [ -f "$LOCALIZABLE_FILE_LIST" ]; then
        # If we've run before and nothing has changed, bail
        NEWER="no"
        
        echo "$LOCALIZABLE_FILE_LIST has mtime `stat -f m $LOCALIZABLE_FILE_LIST`"
        cat "$LOCALIZABLE_FILE_LIST" | while read file; do
            if [ "$file" -nt "$LOCALIZABLE_FILE_LIST" ]; then
              NEWER="yes"
            fi
        done
        
        if [ "$NEWER" = "no" ]; then
            echo "No new localizable files since `stat -f %Sm $LOCALIZABLE_FILE_LIST`; exiting"
            exit 0
        fi
    fi
    
    # Otherwise start from scratch and continue on
    rm -rf "$STRINGS_DIR"
fi

mkdir -p "$STRINGS_DIR"
mkdir "$TMP_OUTPUT"

# Gather the source files and the project file that defined them into a list, which we'll use for early-out
echo "$PROJECT_FILE_PATH"/project.pbxproj  > "$LOCALIZABLE_FILE_LIST"-tmp
source_files=()
$SCRIPTS_DIR/ListSourceFilesInTarget "$TARGET_NAME" c,m,swift "$PROJECT_FILE_PATH" | while read f; do
   source_files+=($f)
   echo "$f" >> "$LOCALIZABLE_FILE_LIST"-tmp
done

if [ $#source_files -gt 0 ]; then
	/usr/bin/genstrings -u -q -o "$TMP_OUTPUT" $source_files
fi

# Build English strings for every xib using base localizations
$SCRIPTS_DIR/ListSourceFilesInTarget "$TARGET_NAME" xib,storyboard "$PROJECT_FILE_PATH" | while read x; do
    xib_basename=`basename $x`
    if [[ "$x" =~ "Base.lproj/$xib_basename\$" ]]; then
        string_table_name="${xib_basename%.*}"
        echo "Creating string table '$string_table_name' from $x" # without this line here, zsh segfaults. (!?)
        ibtool --output-format human-readable-text --export-strings-file "$TMP_OUTPUT/${string_table_name}.strings" "$SRCROOT/$x"
        echo "$x" >> "$LOCALIZABLE_FILE_LIST"-tmp
        EXPECTED_STRINGS_FILES+=$string_table_name
    fi
done

FIX_STRINGS_FILE="$BUILD_DIR/$CONFIGURATION"/FixStringsFile

# If we are building a real bundle (Mac framework or app) sync the built files into that bundle.
if [ -n "${UNLOCALIZED_RESOURCES_FOLDER_PATH-}" ]; then
    RESOURCE_DIR="$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH/$DEVELOPMENT_REGION.lproj"
else
    # We're building a static library (for an iOS "framework", most likely)
    # Publish the results for the app to pick up.
    RESOURCE_DIR="$CONFIGURATION_BUILD_DIR/Resources/$PRODUCT_NAME/$DEVELOPMENT_REGION.lproj"
fi
mkdir -p "$RESOURCE_DIR"

if [ -d "$RESOURCE_DIR" ]; then
    echo "Created resource dir: $RESOURCE_DIR"
else
    echo "Failed to create resource dir: $RESOURCE_DIR"
fi

# Copy each expected string table
while [ $#EXPECTED_STRINGS_FILES != 0 ]; do
    table_name=${EXPECTED_STRINGS_FILES[1]}; shift 1 EXPECTED_STRINGS_FILES;
    
    table_file="$TMP_OUTPUT/${table_name}.strings"
    if [ ! -f "$table_file" ]; then
        echo "Expected a '${table_name}' string table to be generated!"
        exit 1
    fi
    
    # Sort and translate common ASCII sequences into Unicode.
    if [ -x "$FIX_STRINGS_FILE" ]; then
    	"$FIX_STRINGS_FILE" "$table_file"
    else
        # Probably a local build from Xcode rather than our build scripts.
        echo "FixStringsFile isn't built -- skipping (this will result in ASCII to Unicode conversions not happening)"
    fi
    
	if [ "${STRINGS_FILE_OUTPUT_ENCODING-}" = "binary" ]; then
		# In the case that we are building on iOS and these strings are in the main app wrapper, they won't go through CopyLibraryResource (which does the binary-ification for those resources).
		echo "We gonna try to plutil -convert $table_file now"
		/usr/bin/plutil -convert binary1 "$table_file"
		echo "one way or another, plutil exited"
	fi
	
    # Make sure not to re-copy if only the source timestamp has changed. That will invalidate timestamps that may cause further copying into the app bundle. This in turn can invalidate signing, which is very annoying if we are doing incremental device builds.
    rsync -v --recursive --checksum "$table_file" "$RESOURCE_DIR/${table_file:t}"
    
    # Remove the processed files (so that we can check for unexpected files)
    echo "removing $table_file, having just copied it to $RESOURCE_DIR"
    rm "$table_file"
done

unexpected="no"
for x in "$TMP_OUTPUT"/*(N); do
    echo "Checking $x against ${LOCALIZABLE_FILE_LIST}-tmp"
    if [ "$x" != "$LOCALIZABLE_FILE_LIST"-tmp ]; then
        echo >&2 "Unexpected string file emitted: $x"
        unexpected="yes"
    fi
done

if [ $unexpected = "yes" ]; then
    exit 1
else
    mv "$LOCALIZABLE_FILE_LIST"-tmp "$LOCALIZABLE_FILE_LIST"

    echo "Localized files:"
    cat "$LOCALIZABLE_FILE_LIST"
fi
