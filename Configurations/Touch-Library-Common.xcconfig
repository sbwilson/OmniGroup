// Copyright 2008-2010 Omni Development, Inc.  All rights reserved.
//
// This software may only be used and reproduced according to the terms in the file OmniSourceLicense.html, which should be distributed with this project and can also be found at <http://www.omnigroup.com/developer/sourcecode/sourcelicense/>.
// $Id$

// Common settings for all iPhone/iPad targets
#include "Target-Touch-Common.xcconfig"

// Common settings for Library targets
INFOPLIST_FILE = 

STRIP_INSTALLED_PRODUCT = NO

// Publish all public header files for Foo to a common area as <Foo/header.h>
PUBLIC_HEADERS_FOLDER_PATH = include/$(PRODUCT_NAME)

// Publish private headers to a per-product area, but still as <Foo/header.h> as would work with a framework
PRIVATE_HEADERS_FOLDER_PATH = private/$(PRODUCT_NAME)-Private/$(PRODUCT_NAME)

// And include any private headers for just *our* library. Also look in $(TARGET_BUILD_DIR)/include for release builds.
HEADER_SEARCH_PATHS = $(value) $(CONFIGURATION_BUILD_DIR)/include $(CONFIGURATION_BUILD_DIR)/private/$(PRODUCT_NAME)-Private $(TARGET_BUILD_DIR)/include

// NOTE: We no longer due this since disabling the headermap in this way means that if you have a syntax error in your header, clicking on it in Xcode will open the installed header instead of the source header. We have a script to check that imports are done correctly... not nearly as nice, but better than editing installed headers by accident.
// Xcode is aggressive about #imports included in header maps by default. We want to make sure that only our public headers (the ones copied to .../include/Foo) are #import via <Foo/bar.h>
// Otherwise, it is easy to let one file include a header for a category and then not include the corresponding .m file.
//HEADERMAP_INCLUDES_FLAT_ENTRIES_FOR_TARGET_BEING_BUILT = NO
//HEADERMAP_INCLUDES_FRAMEWORK_ENTRIES_FOR_ALL_PRODUCT_TYPES = NO
//HEADERMAP_INCLUDES_PROJECT_HEADERS = NO

// Claim that we are building a framework, though it is a 'static' framework.
// The point of this is that OmniBase/macros.h will make errors if we use the
// main-bundle localized string lookup macros.
OMNI_TARGET_COMMON_PREPROCESSOR_DEFINITIONS = OMNI_BUILDING_FRAMEWORK_OR_BUNDLE
OMNI_TARGET_COMMON_SWIFT_FLAGS = -DOMNI_BUILDING_FRAMEWORK_OR_BUNDLE

// This isn't defined for the library target for some reason
TEST_FRAMEWORK_SEARCH_PATHS=$(PLATFORM_DIR)/Developer/Library/Frameworks $(SDKROOT)/Developer/Library/Frameworks
