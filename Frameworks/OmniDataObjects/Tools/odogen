#!/usr/bin/ruby

require 'getoptlong'
require 'pathname'
require 'fileutils'

$: << Pathname.new(File.dirname(__FILE__)).realpath
require 'OmniDataObjects'
include OmniDataObjects # Make the DSL live in our namespace

$prog = File.basename(__FILE__)
def usage
  msg = <<EOS
#{$prog} - Generate source files for an OmniDataObjects model.
usage: #{$prog} [options] Foo.odomodel
    --help [-h]                   Print this help
    --debug [-d]                  Turn on debug output
    --output-directory [-D] dir   The directory in which to place output; placed in DERIVED_FILE_DIR by default
EOS
  STDERR.print msg
  exit 1
end

options = GetoptLong.new(
[ "--help", "-h", GetoptLong::NO_ARGUMENT ],
[ "--debug", "-d", GetoptLong::NO_ARGUMENT ],
[ "--output-directory", "-D", GetoptLong::REQUIRED_ARGUMENT ],
)

output_directory = nil

options.each do |opt, arg|
  case opt
  when "--debug"
    OmniDataObjects::Options.debug = true
  when "--output-directory"
    output_directory = arg
  else
    usage()
  end
end

if output_directory == nil
    output_directory = ENV["DERIVED_FILE_DIR"] || fail("DERIVED_FILE_DIR not defined!")
end    
FileUtils.mkdir_p(output_directory)
OmniDataObjects::Options.model_output_directory = output_directory

fail "Should be exactly one model file specified" unless ARGV.length == 1

path = Pathname.new(ARGV[0]).realpath
eval(File.read(path))

# Check that the files that got written are the ones we expected
expected_paths = []
while path = ENV["SCRIPT_OUTPUT_FILE_#{expected_paths.length}"]
  expected_paths << Pathname.new(path).realpath.to_s
end

actual_paths = OmniDataObjects::SourceFile.written_paths.map {|path| Pathname.new(path).realpath.to_s}
had_error = false
expected_paths.each {|path|
  path_index = actual_paths.index(path)
  if path_index
    actual_paths.delete_at(path_index)
  else
    STDERR.print "*** Error: Did not write expected file \"#{path}\"\n"
    had_error = true
  end
}
actual_paths.each {|path|
  STDERR.print "*** Error: Wrote unexpected file \"#{path}\"\n"
  had_error = true
}

if had_error
  exit(1)
end
